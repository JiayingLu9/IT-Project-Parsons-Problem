- Example 1:
```
{
"Code": 
"dictDF = {"A": ["308 Negra Arroyo Lane", "6353 Juan Tabo Blvd", "161 Barry St", "102 Dunbar St."],
          "B": ["this is <b>important</b>", "this is not important", "no info<i></i>", this is <br>a new line"],
          "C": ["Walter White ww@gmail.com", "Harry Potter hp@gmail.com", "Luke Skywalker ls@gmail.com", "Saul Goodman"],
          "D": ["Abcd","EFGF", "zefsalf", "sdfslew", "zekfsdf"]}
df = pd.DataFrame(dictDF)
def search_words(text):
    result = re.findall(r'\b[^\d\W]+\b', text)
    return " ".join(result)
df["A"]=df["A"].apply(lambda x : search_words(x))
def remove_tags(string):
    result = re.sub('<.*?>','', string)
    return result
df["B"]=df["B"].apply(lambda cw : remove_tags(cw))
def find_email(text):
    email = re.findall(r'[\w\.-]+@[\w\.-]+',str(text))
    return ",".join(email)
df["C"]=df["C"].apply(lambda x: find_email(x))
df["D"] = list(map(lambda x: x.title(), df["D"]))
print(df)",
"Description": "The code creates a dictionary and uses it to create a Pandas DataFrame. Then, it creates a function to find all words in a given string using regular expression, and uses the function on the first column of the DataFrame. After this, it creates another function to remove any markdown or html tags from a given string, and uses the function on the second column of the DataFrame. It also creates a function to extract email addresses from a given string, and uses the function on the third column of the DataFrame. Finally, it converts all entries of the fourth column of the DataFrame into title case, and prints the DataFrame.",
"ExpectedOutput": "A DataFrame with the columns after the changes.",
"CSVName": null,
"CSV": null
}
```

- Example 2:
```
{
"Code": 
"dictA = {"A": ["A1", "A2", "A3"],
         "B": ["B1", "B2", "B3"],
         "C": ["C1", "C2", "C3"]}
dfA = pd.DataFrame(dictA, index=[1, 2, 3])
dictB = {"B": ["B2", "B3", "B4", "B5"],
         "C": ["C2", "C3", "C4", "C5"]}
dfB = pd.DataFrame(dictB, index=[2, 3, 4, 5])
result = pd.concat([dfA, dfB], axis=1, join="inner") 
dictC = {"D": ["D4", "D5", "D6", "D7"],
         "E": ["E4", "E5", "E6", "E7"],
         "F": ["F4", "F5", "F6", "F7"]}
dfC = pd.DataFrame(dictC, index=[4, 5, 6, 7])
result = pd.concat([result, dfC], axis=1)
dictDdictD = {"E": ["E6", "E7", "E8", "E9"],
         "F": ["F6", "F7", "F8", "F9"],
         "G": ["G6", "G7", "G8", "G9"],
         "H": ["H6", "H7", "H8", "H9"]}
dfD = pd.DataFrame({dictD, index=[6, 7, 8, 9]})
result = pd.concat([result, dfD], ignore_index=True, sort=False)
print(result)",
"Description": "The code creates two Pandas DataFrames (A and B) from two dictionaries and perform a left join on them. Then, it creates another DataFrame (C), and join it with the previous DataFrame (A and B), handling any values that don't exist in it. Finally, it creates another DataFrame, and join it with the joined DataFrame (A, B and C), ignoring any overlapping indexes. At then end, it prints the joined DataFrame.",
"ExpectedOutput": "A joined DataFrame containing all information from the four DataFrames.",
"CSVName": null,
"CSV": null
}
```

- Example 3:
The code should have None values in DataFrames
```
{
"Code": "dictDF = {"A": [2, None, 3, 1, 3, 1, 4, None, 8, 4, 9, 5, 3, 4, 5, 2, 1, 4, None, 8],
         "B": [4, 1, 1611, 5, None, 2, 4, 2, 5, 6, 8, 6, 3, 9, 7, None, None, 9, 1, 2],
         "C": [3, 4, 5, 1, 2, 7, 8, "five", 3, 7, 9, "five", 1, 2, 6, 2, 1, "five", "four", 2, 3]}
df = pd.DataFrame(dictDF)
colAMean = df["A"].mean()
df["A"] = df["A"].fillna(colAMean)
colBMedian = df["B"].median()
df["B"] = df["B"].fillna(colBMedian)
df["C"].replace(to_replace="five", value=5)
df["C"].replace(to_replace="four", value=4)",
print(df)
"Description": "The code creates a dictionary, which contains some empty entries and values in wrong formats, and uses it to create a Pandas DataFrame. Then, it replaces all empty entries in the first column with its mean value, and all empty entries in the second column with its median value. Finally, it replaces any strings the third column with its corresponding integer value.",
"ExpectedOutput": "A DataFrame with all empty entries and incorrectly formatted values replaced with more appropriate ones.",
"CSVName": null,
"CSV": null
}
```

- Example 4:
```
{
"Code": "ticketsSoldDict =  {'Movie 1': 107512,
                        'Movie 2': 103208,
                        'Movie 3': 99388,
                        'Movie 4': 103838,
                        'Movie 5': 104631} 
ticketsSold = pd.Series(ticketsSoldDict)
maxCapacityDict = {'Movie 1': 427725,
                      'Movie 2': 427300,
                      'Movie 3': 429350,
                      'Movie 4': 424325,
                     'Movie 5': 423375}
maxCapacity = pd.Series(maxCapacityDict)
classificationDict = {'Movie 1': 'M',
                      'Movie 2': 'PG',
                      'Movie 3': 'M',
                      'Movie 4': 'G',
                      'Movie 5': 'G'}
classification = pd.Series(classificationDict)
salesDF = pd.DataFrame({'tickets sold': ticketsSold, 'max capacity': maxCapacity, 'classification': classification})
salesDF["occupancy"] = round(salesDF["tickets sold"]/salesDF["max capacity"], 2)
salesDF.rename(columns={"occupancy": "occupancy rate"})
salesDF.sort_values(by="occupancy rate")
groupedDF = salesDF.groupby('classification').agg({'max capacity': 'max', 'tickets sold': 'mean', 'occupancy rate': 'mean'})
print(groupedDF)
print(salesDF.points.describe())
print(salesDF)",
"Description': "The code creates three Pandas Series, and uses them to create a Pandas DataFrame. It creates a new column "occupancy", using data from columns "tickets sold", "max capacity" in the DataFrame. Then, it renames this new column to "occupancy rate", before sorting the DataFrame by the column. After this, it creates a new DataFrame by using groupby and agg on the original DataFrame, then prints it out. Finally, it prints the description of the original DataFrame and the DataFrame itself.",
"ExpectedOutput": "A DataFrame grouped by the "classification" column, the description of the original DataFrame, and the original DataFrame itself.",
"CSVName": null,
"CSV": null
}
```
